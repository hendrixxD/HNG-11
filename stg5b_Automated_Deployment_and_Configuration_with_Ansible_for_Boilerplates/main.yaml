---
- name: Setup Boilerplate Application
  hosts: hng
  become: yes
  vars:
    pg_admin_user: "admin"
    pg_admin_password: "your_password"  # Change this password accordingly

  tasks:
    - name: Create hng user
      user:
        name: hng
        shell: /bin/bash
        groups: sudo
        create_home: yes

    - name: Create necessary directories
      file:
        path: "{{ item }}"
        state: directory
        owner: hng
        group: hng
        mode: '0755'
      loop:
        - /opt/stage_5b
        - /var/secrets
        - /var/log/stage_5b

    - name: Clone the repository
      git:
        repo: 'https://github.com/hngprojects/hng_boilerplate_csharp_web.git'
        dest: /opt/stage_5b
        version: devops
        force: yes
      become_user: hng

    - name: Download the Microsoft package repository GPG keys
      ansible.builtin.get_url:
        # url: "https://packages.microsoft.com/config/ubuntu/{{ ansible_distribution_release }}/packages-microsoft-prod.deb"
        url: https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        dest: /tmp/packages-microsoft-prod.deb

    - name: Install the Microsoft package repository GPG keys
      ansible.builtin.command: dpkg -i /tmp/packages-microsoft-prod.deb

    - name: Update the package index
      ansible.builtin.apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - dotnet-sdk-8.0
          - postgresql
          - redis-server
          - nginx
        state: present

    - name: Start and enable PostgreSQL and Redis services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - postgresql
        - redis-server

    - name: Save PostgreSQL credentials
      copy:
        content: |
          PGUSER={{ pg_admin_user }}
          PGPASSWORD={{ pg_admin_password }}
        dest: /var/secrets/pg_pw.txt
        owner: hng
        group: hng
        mode: '0600'

    - name: Configure PostgreSQL
      become_user: postgres
      postgresql_user:
        name: "{{ pg_admin_user }}"
        password: "{{ pg_admin_password }}"
        state: present

    - name: Create PostgreSQL database
      become_user: postgres
      postgresql_db:
        name: hng_db
        owner: "{{ pg_admin_user }}"
        state: present

    - name: Ensure application starts on port 3000
      shell: |
        cd /opt/stage_5b/src/Hng.Web
        dotnet restore
        dotnet build
        nohup dotnet run --urls "http://127.0.0.1:3000" &
      become_user: hng

    - name: Configure Nginx
      copy:
        dest: /etc/nginx/sites-available/stage_5b
        content: |
          server {
              listen 80;
              server_name _;
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify: Restart Nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/stage_5b
        dest: /etc/nginx/sites-enabled/
        state: link
      notify: Restart Nginx

    - name: Configure logging
      lineinfile:
        path: /etc/nginx/nginx.conf
        regexp: '^(error_log|access_log)'
        line: |
          error_log /var/log/stage_5b/error.log;
          access_log /var/log/stage_5b/out.log;
      notify: Restart Nginx

    - name: Ensure log files ownership
      file:
        path: "{{ item }}"
        owner: hng
        group: hng
        mode: '0644'
      loop:
        - /var/log/stage_5b/error.log
        - /var/log/stage_5b/out.log

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
